<?phpnamespace LinkSoft\Sms\Adapter;use GuzzleHttp\Exception\GuzzleException;use Hyperf\Utils\Codec\Json;use LinkSoft\Sms\Driver;/** * 阿里云通道 * Class SmsAliyun * @package LinkSoft\Sms */class SmsAliyun extends Driver{    public function send(string $country, string $mobile, string $content): bool    {        // TODO: Implement send() method.        $option['SignName'] = $this->options['sign'];        $option['AccessKeyId'] = $this->options['accessId'];        $option['TemplateCode'] = $this->options['templateId'];        $option['PhoneNumbers'] = $mobile;        $option['TemplateParam'] = '{"code":"' . $content . '"}';        $option['RegionId'] = $this->options['regionId'];        $option['Action'] = 'SendSms';        $params = array_merge($this->getPublicParam(), $option);        unset($params['Signature']);        ksort($params);        $query = '';        foreach ($params as $key => $value) {            $query .= '&' . $this->encode($key) . '=' . $this->encode($value);        }        $sign = 'GET&%2F&' . $this->encode(substr($query, 1));        $signature = base64_encode(hash_hmac('sha1', $sign, $this->options['accessKey'] . '&', true));        $params['Signature'] = $signature;        try {            $response = $this->client->get($this->options['api'] . '?' . http_build_query($params));            $response = Json::decode($response->getBody()->getContents());            if (!isset($response['Code']) || $response['Code'] != 'OK') {                $this->logger->error('send aliyun sms error ' . $response['Message']);                return false;            }            return true;        } catch (GuzzleException $exception) {            $this->logger->error('send aliyun sms error ' . $exception->getMessage());            return false;        }    }    private function encode($string)    {        $string = urlencode($string);        $string = preg_replace('/\+/', '%20', $string);        $string = preg_replace('/\*/', '%2A', $string);        return preg_replace('/%7E/', '~', $string);    }    private function getPublicParam()    {        return ['Version' => '2017-05-25', 'Timestamp' => gmdate('Y-m-d\TH:i:s\Z'), 'SignatureVersion' => '1.0', 'SignatureNonce' => uniqid(), 'SignatureMethod' => 'HMAC-SHA1', 'Format' => 'JSON'];    }}
<?phpnamespace LinkSoft\Sms;use Hyperf\Contract\ConfigInterface;use LinkSoft\Sms\Exception\ConfigException;use Psr\Container\ContainerInterface;class SmsFactory{    /**     * @var ContainerInterface     */    private $container;    /**     * @var ConfigInterface     */    private $config;    /**     * @var array     */    private $channels = [];    public function __construct(ContainerInterface $container)    {        $this->container = $container;        $this->config = $container->get(ConfigInterface::class);    }    public function get(string $name = 'default', $options = [])    {        $encode = sha1(serialize($options));        if (isset($this->channels[$name][$encode]) && $this->channels[$name][$encode] instanceof Driver) {            return $this->channels[$name][$encode];        }        return $this->channels[$name][$encode] = $this->make($name, $options);    }    private function make(string $name = 'default', array $options = []): Driver    {        if (!$config = $this->config->get('sms.' . $name)) {            throw new ConfigException('sms config empty');        }        $options = array_merge($config, $options);        $driver = $options['driver'] ?? 'default';        return make($driver, ['options' => $options]);    }}